How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    This made it easier to locate and correct the file error instead of reading line by line of code.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

    If your new code does not work correctly you easily return to the previous version and make a correction. Another
    way it can make oyu more efficient is bying seeing what was changed that made the program run better and keep these
    correction saved in a template for later use.    

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?
    
    A con would be the time to take to save your commit your files but a pro would be you having complete control on
    when it was saved.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    This way all your changes would be saved in one complete file history.

How can you use the commands git log and git diff to view the history of files?
    
    One way would be able to find errors in a project and be able to copy and past the file number to revert back to the old version
    of the project.

How might using version control make you more confident to make changes that
could break something?
    
    You are always able to revert back to your old working file and also will allow you to try more complex code that you might be a 
    worried about doing without version control.

Now that you have your workspace set up, what do you want to try using Git for?

    Opening up a text editor from the command line.